import tensorflow as tf
from tensorflow.keras import Model, layers

def create_yolo_model(input_shape=(416, 416, 3), num_classes=80):
    inputs = layers.Input(shape=input_shape)
    
    x = layers.Conv2D(32, (3, 3), padding='same', strides=(1, 1))(inputs)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)
    
    x = layers.Conv2D(64, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)
    
    x = layers.Conv2D(128, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(64, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(128, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)
    
    x = layers.Conv2D(256, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(128, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(256, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)
    
    x = layers.Conv2D(512, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(256, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(512, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(256, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(512, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    skip_connection = x
    
    x = layers.MaxPooling2D(pool_size=(2, 2))(x)
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(512, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(512, (1, 1), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    skip_connection = layers.Conv2D(64, (1, 1), padding='same', strides=(1, 1))(skip_connection)
    skip_connection = layers.BatchNormalization()(skip_connection)
    skip_connection = layers.LeakyReLU(alpha=0.1)(skip_connection)
    skip_connection = layers.Lambda(lambda x: tf.space_to_depth(x, block_size=2))(skip_connection)
    
    x = layers.Concatenate()([skip_connection, x])
    
    x = layers.Conv2D(1024, (3, 3), padding='same', strides=(1, 1))(x)
    x = layers.BatchNormalization()(x)
    x = layers.LeakyReLU(alpha=0.1)(x)
    
    x = layers.Conv2D(num_classes + 5, (1, 1), padding='same', strides=(1, 1))(x)
    outputs = layers.Reshape((13, 13, 3, num_classes + 5))(x)
    
    model = Model(inputs=inputs, outputs=outputs)
    
    return model

model = create_yolo_model()

def preprocess_image(image, target_size):
    image = tf.image.resize(image, target_size)
    image = image / 255.0
    return image

def load_image_from_path(image_path):
    image = tf.io.read_file(image_path)
    image = tf.image.decode_image(image, channels=3)
    image = tf.image.convert_image_dtype(image, tf.float32)
    return image

def load_and_preprocess_image(image_path, target_size):
    image = load_image_from_path(image_path)
    image = preprocess_image(image, target_size)
    return image

def get_bounding_boxes(predictions, confidence_threshold=0.5):
    boxes, scores, classes, nums = predictions
    valid_boxes = []
    for i in range(nums[0]):
        if scores[0][i] >= confidence_threshold:
            box = boxes[0][i].numpy()
            valid_boxes.append((box, scores[0][i].numpy(), classes[0][i].numpy()))
    return valid_boxes

def draw_bounding_boxes(image, bounding_boxes, class_names):
    import matplotlib.pyplot as plt
    import matplotlib.patches as patches

    fig, ax = plt.subplots(1)
    ax.imshow(image)

    for box, score, class_id in bounding_boxes:
        y1, x1, y2, x2 = box
        width, height = x2 - x1, y2 - y1
        rect = patches.Rectangle((x1, y1), width, height, linewidth=1, edgecolor='r', facecolor='none')
        ax.add_patch(rect)
        label = f"{class_names[int(class_id)]}: {score:.2f}"
        plt.text(x1, y1, label, color='white', fontsize=12, bbox=dict(facecolor='red', alpha=0.5))

    plt.show()

def main(image_path, class_names, target_size=(416, 416)):
    image = load_and_preprocess_image(image_path, target_size)
    image = tf.expand_dims(image, axis=0)
    
    predictions = model.predict(image)
    bounding_boxes = get_bounding_boxes(predictions)
    
    original_image = tf.image.decode_image(tf.io.read_file(image_path))
    original_image = tf.image.convert_image_dtype(original_image, tf.float32)
    
    draw_bounding_boxes(original_image, bounding_boxes, class_names)

class_names = ["person", "bicycle", "car", "motorcycle", "airplane", "bus", "train", "truck", "boat", "traffic light",
               "fire hydrant", "stop sign", "parking meter", "bench", "bird", "cat", "dog", "horse", "sheep", "cow",
               "elephant", "bear", "zebra", "giraffe", "backpack", "umbrella", "handbag", "tie", "suitcase", "frisbee",
               "skis", "snowboard", "sports ball", "kite", "baseball bat", "baseball glove", "skateboard", "surfboard",
               "tennis racket", "bottle", "wine glass", "cup", "fork", "knife", "spoon", "bowl", "banana", "apple",
               "sandwich", "orange", "broccoli", "carrot", "hot dog", "pizza", "donut", "cake", "chair", "couch",
               "potted plant", "bed", "dining table", "toilet", "tv", "laptop", "mouse", "remote", "keyboard",
               "cell phone", "microwave", "oven", "toaster", "sink", "refrigerator", "book", "clock", "vase",
               "scissors", "teddy bear", "hair drier", "toothbrush"]

main(image_path, class_names)
